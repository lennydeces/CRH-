[
  {
    "objectID": "CRH-.html",
    "href": "CRH-.html",
    "title": "CRH-",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "CRH-.html#running-code",
    "href": "CRH-.html#running-code",
    "title": "CRH-",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "CRH-.html#getting-started",
    "href": "CRH-.html#getting-started",
    "title": "CRH-",
    "section": "Getting started",
    "text": "Getting started\n\nPackages\nWe start with loading the packages we’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on.\nlibrary(tidyverse)\nlibrary(scales)\n\n\nData\nThe data are stored as a CSV (comma separated values) file in the data folder of your repository. Let’s read it from there and save it as an object called bechdel.\nbechdel <- read_csv(\"data/bechdel.csv\")\n\n\nGet to know the data\nWe can use the glimpse function to get an overview (or “glimpse”) of the data.\nglimpse(bechdel)\n\nRows: 1,615\nColumns: 17\n$ title         <chr> \"21 & Over\", \"Dredd 3D\", \"12 Years a Slave\", \"2 Guns\", \"…\n$ year          <dbl> 2013, 2012, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 20…\n$ gross_2013    <dbl> 67878146, 55078343, 211714070, 208105475, 190040426, 184…\n$ budget_2013   <dbl> 13000000, 45658735, 20000000, 61000000, 40000000, 225000…\n$ roi           <dbl> 5.221396, 1.206305, 10.585703, 3.411565, 4.751011, 0.818…\n$ binary        <chr> \"FAIL\", \"PASS\", \"FAIL\", \"FAIL\", \"FAIL\", \"FAIL\", \"FAIL\", …\n$ clean_test    <chr> \"notalk\", \"ok\", \"notalk\", \"notalk\", \"men\", \"men\", \"notal…\n$ imdb          <chr> \"tt1711425\", \"tt1343727\", \"tt2024544\", \"tt1272878\", \"tt0…\n$ test          <chr> \"notalk\", \"ok-disagree\", \"notalk-disagree\", \"notalk\", \"m…\n$ budget        <dbl> 1.30e+07, 4.50e+07, 2.00e+07, 6.10e+07, 4.00e+07, 2.25e+…\n$ domgross      <dbl> 25682380, 13414714, 53107035, 75612460, 95020213, 383624…\n$ intgross      <dbl> 42195766, 40868994, 158607035, 132493015, 95020213, 1458…\n$ code          <chr> \"2013FAIL\", \"2012PASS\", \"2013FAIL\", \"2013FAIL\", \"2013FAI…\n$ domgross_2013 <dbl> 25682380, 13611086, 53107035, 75612460, 95020213, 383624…\n$ intgross_2013 <dbl> 42195766, 41467257, 158607035, 132493015, 95020213, 1458…\n$ period_code   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ decade_code   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n\nWhat does each observation (row) in the data set represent?\n\nEach observation represents a different movie.\n\nHow many observations (rows) are in the data set?\n\nThere are 1615 movies in the dataset.\n\nHow many variables (columns) are in the data set?\n\nThere are 17 columns in the dataset.\n\n\nVariables of interest\nThe variables we’ll focus on are the following:\n\nbudget_2013: Budget in 2013 inflation adjusted dollars.\ngross_2013: Gross (US and international combined) in 2013 inflation adjusted dollars.\nroi: Return on investment, calculated as the ratio of the gross to budget.\nclean_test: Bechdel test result:\n\nok = passes test\ndubious\nmen = women only talk about men\nnotalk = women don’t talk to each other\nnowomen = fewer than two women\n\nbinary: Bechdel Test PASS vs FAIL binary\n\nWe will also use the year of release in data prep and title of movie to take a deeper look at some outliers.\nThere are a few other variables in the dataset, but we won’t be using them in this analysis."
  },
  {
    "objectID": "CRH-.html#visualizing-data-with-ggplot2",
    "href": "CRH-.html#visualizing-data-with-ggplot2",
    "title": "CRH-",
    "section": "Visualizing data with ggplot2",
    "text": "Visualizing data with ggplot2\nggplot2 is the package and ggplot() is the function in this package that is used to create a plot.\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = bechdel.\n\n\nggplot(data = bechdel)\n\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\nggplot(data = bechdel, \n       mapping = aes(x = budget_2013, y = gross_2013))\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013))\n\nNote that the result is exactly the same.\n\nThe geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we use geom_point which creates a plot where each observation is represented by a point.\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013)) +\n  geom_point()\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\nNote that this results in a warning as well. What does the warning mean?"
  },
  {
    "objectID": "CRH-.html#budget-vs.-gross-revenue",
    "href": "CRH-.html#budget-vs.-gross-revenue",
    "title": "CRH-",
    "section": "Budget vs. gross revenue",
    "text": "Budget vs. gross revenue\n\nStep 1 - Your turn\nModify the following plot to change the color of all points to a different color.\nTip\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice."
  },
  {
    "objectID": "CRH-.html#single-variable",
    "href": "CRH-.html#single-variable",
    "title": "CRH-",
    "section": "Single variable",
    "text": "Single variable\nCreate visualizations of the distribution of preds_rate for the prognosticators.\n\nMake a histogram. Set an appropriate binwidth.\n\n\nggplot(seers, aes(x = preds_rate)) +\n  geom_histogram(binwidth = 0.02)\n\n\nMake a boxplot.\n\n\nggplot(seers, aes(x = preds_rate)) +\n  geom_boxplot()\n\n\nBased on these, determine if each of the following statements about the shape of the distribution is true or false.\n\nThe distribution of prediction success rate in this sample is left skewed. FALSE\nThe distribution of prediction success rate in this sample is unimodal. FALSE"
  },
  {
    "objectID": "CRH-.html#two-variables",
    "href": "CRH-.html#two-variables",
    "title": "CRH-",
    "section": "Two variables",
    "text": "Two variables\nCreate visualizations of the distribution of preds_rate by alive (whether or not the prognosticator is alive).\n\nMake a single histogram. Set an appropriate binwidth.\n\n\nggplot(\n  seers,\n  aes(x = preds_rate, fill = alive)\n) +\n  geom_histogram(binwidth = 0.02, alpha = 0.5, color = \"black\")\n\n\nUse multiple histograms via faceting, one for each type. Set an appropriate binwidth, add color as you see fit, and turn off legends if not needed.\n\n\nggplot(\n  seers,\n  aes(x = preds_rate, fill = alive)\n) +\n  geom_histogram(binwidth = 0.02, show.legend = FALSE) +\n  facet_wrap(vars(alive), ncol = 1)\n\n\nUse side-by-side box plots. Add color as you see fit and turn off legends if not needed.\n\n\nggplot(\n  seers,\n  aes(x = alive, y = preds_rate, fill = alive)\n) +\n  geom_boxplot(show.legend = FALSE)\n\n\nUse density plots. Add color as you see fit.\n\n\nggplot(\n  seers,\n  aes(x = preds_rate, fill = alive)\n) +\n  geom_density(alpha = 0.5)\n\n\nUse violin plots. Add color as you see fit and turn off legends if not needed.\n\n\nggplot(\n  seers,\n  aes(x = alive, y = preds_rate, fill = alive)\n) +\n  geom_violin(alpha = 0.5, show.legend = FALSE)\n\n\nMake a jittered scatter plot. Add color as you see fit and turn off legends if not needed.\n\n\nggplot(\n  seers,\n  aes(x = alive, y = preds_rate, color = alive)\n) +\n  geom_jitter(show.legend = FALSE)\n\n\nUse beeswarm plots. Add color as you see fit and turn off legends if not needed.\n\n\nlibrary(ggbeeswarm)\n\nggplot(\n  seers,\n  aes(x = alive, y = preds_rate, color = alive)\n) +\n  geom_beeswarm(show.legend = FALSE)\n\n\nUse multiple geoms on a single plot. Be deliberate about the order of plotting. Change the theme and the color scale of the plot. Finally, add informative labels.\n\n\nggplot(\n  seers,\n  aes(x = alive, y = preds_rate, color = alive)\n) +\n  geom_beeswarm(show.legend = FALSE) +\n  geom_boxplot(show.legend = FALSE, alpha = 0.5) +\n  scale_color_viridis_d(option = \"D\", end = 0.8) +\n  scale_y_continuous(labels = scales::label_percent()) +\n  theme_minimal() +\n  labs(\n    x = \"Is the prognosticator alive?\",\n    y = \"Prediction accuracy for late winter/early spring\",\n    title = \"Accuracy of prognosticators predicting the coming season\",\n    subtitle = \"By living status of prognosticator\"\n  )"
  },
  {
    "objectID": "CRH-.html#multiple-variables",
    "href": "CRH-.html#multiple-variables",
    "title": "CRH-",
    "section": "Multiple variables",
    "text": "Multiple variables\n\nFacet the plot you created in the previous exercise by forecaster_simple. Adjust labels accordingly.\n\n\nggplot(\n  seers,\n  aes(x = alive, y = preds_rate, color = alive)\n) +\n  geom_beeswarm(show.legend = FALSE) +\n  geom_boxplot(show.legend = FALSE, alpha = 0.5) +\n  scale_color_viridis_d(option = \"D\", end = 0.8) +\n  scale_y_continuous(labels = scales::label_percent()) +\n  facet_wrap(vars(forecaster_simple)) +\n  theme_minimal() +\n  labs(\n    x = \"Is the prognosticator alive?\",\n    y = \"Prediction accuracy for late winter/early spring\",\n    title = \"Accuracy of prognosticators predicting the coming season\",\n    subtitle = \"By type and living status of prognosticator\"\n  )\n\nBefore you continue, let’s turn off all warnings the code chunks generate and resize all figures. We’ll do this by editing the YAML."
  },
  {
    "objectID": "CRH-.html#visualizing-other-variables---your-turn",
    "href": "CRH-.html#visualizing-other-variables---your-turn",
    "title": "CRH-",
    "section": "Visualizing other variables - Your turn!",
    "text": "Visualizing other variables - Your turn!\n\nPick a single categorical variable from the data set and make a bar plot of its distribution.\n\n\n# add code here\n\nPick two categorical variables and make a visualization to visualize the relationship between the two variables. Along with your code and output, provide an interpretation of the visualization.\n\n\n# add code here\nInterpretation goes here…\n\nMake another plot that uses at least three variables. At least one should be numeric and at least one categorical. In 1-2 sentences, describe what the plot shows about the relationships between the variables you plotted. Don’t forget to label your code chunk.\n\n\n# add code here\nInterpretation goes here…"
  },
  {
    "objectID": "CRH-.html#footnotes",
    "href": "CRH-.html#footnotes",
    "title": "CRH-",
    "section": "Footnotes",
    "text": "Footnotes\n\nI would prefer prognosticators, but I had way too many typos preparing these materials to make you all use it.↩︎\nSource: Countdown to Groundhog Day. Application exercise inspired by Groundhogs Do Not Make Good Meteorologists originally published on FiveThirtyEight.↩︎\nPrognosticators labeled as Animatronic/Puppet/Statue/Stuffed/Taxidermied are classified as not alive.↩︎\nWe adopt the same definition as FiveThirtyEight. An “Early Spring” is defined as any year in which the average temperature in either February or March was higher than the historic average. A “Long Winter” was when the average temperature in both months was lower than or the same as the historical average.↩︎"
  },
  {
    "objectID": "CRH-.html#select",
    "href": "CRH-.html#select",
    "title": "CRH-",
    "section": "select()",
    "text": "select()\n\nDemo: Make a data frame that only contains the variables score and cls_students.\n\n\nevals |>\n  select(score, cls_students)\n\n# A tibble: 463 × 2\n   score cls_students\n   <dbl>        <dbl>\n 1   4.7           43\n 2   4.1          125\n 3   3.9          125\n 4   4.8          123\n 5   4.6           20\n 6   4.3           40\n 7   2.8           44\n 8   4.1           55\n 9   3.4          195\n10   4.5           46\n# … with 453 more rows\n\nDemo: Make a data frame that keeps every variable except cls_students.\n\n\nevals |>\n  select(-cls_students)\n\n# A tibble: 463 × 22\n   course_id prof_id score rank     ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n       <dbl>   <dbl> <dbl> <chr>    <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n 1         1       1   4.7 tenure … minori… female english    36    55.8      24\n 2         2       1   4.1 tenure … minori… female english    36    68.8      86\n 3         3       1   3.9 tenure … minori… female english    36    60.8      76\n 4         4       1   4.8 tenure … minori… female english    36    62.6      77\n 5         5       2   4.6 tenured  not mi… male   english    59    85        17\n 6         6       2   4.3 tenured  not mi… male   english    59    87.5      35\n 7         7       2   2.8 tenured  not mi… male   english    59    88.6      39\n 8         8       3   4.1 tenured  not mi… male   english    51   100        55\n 9         9       3   3.4 tenured  not mi… male   english    51    56.9     111\n10        10       4   4.5 tenured  not mi… female english    40    87.0      40\n# … with 453 more rows, 12 more variables: cls_level <chr>, cls_profs <chr>,\n#   cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>, bty_f2upper <dbl>,\n#   bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>, bty_avg <dbl>,\n#   pic_outfit <chr>, pic_color <chr>, and abbreviated variable names\n#   ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\nDemo: Make a data frame that includes all variables between score through age (inclusive).\n\n\nevals |>\n  select(score:age)\n\n# A tibble: 463 × 6\n   score rank         ethnicity    gender language   age\n   <dbl> <chr>        <chr>        <chr>  <chr>    <dbl>\n 1   4.7 tenure track minority     female english     36\n 2   4.1 tenure track minority     female english     36\n 3   3.9 tenure track minority     female english     36\n 4   4.8 tenure track minority     female english     36\n 5   4.6 tenured      not minority male   english     59\n 6   4.3 tenured      not minority male   english     59\n 7   2.8 tenured      not minority male   english     59\n 8   4.1 tenured      not minority male   english     51\n 9   3.4 tenured      not minority male   english     51\n10   4.5 tenured      not minority female english     40\n# … with 453 more rows\n\nDemo: Use the select helper contains() to make a data frame that includes the variables associated with the class, i.e., contains the string \"cls\\_\" in the name.\n\n\nevals |>\n  select(contains(\"cls_\"))\n\n# A tibble: 463 × 6\n   cls_perc_eval cls_did_eval cls_students cls_level cls_profs cls_credits \n           <dbl>        <dbl>        <dbl> <chr>     <chr>     <chr>       \n 1          55.8           24           43 upper     single    multi credit\n 2          68.8           86          125 upper     single    multi credit\n 3          60.8           76          125 upper     single    multi credit\n 4          62.6           77          123 upper     single    multi credit\n 5          85             17           20 upper     multiple  multi credit\n 6          87.5           35           40 upper     multiple  multi credit\n 7          88.6           39           44 upper     multiple  multi credit\n 8         100             55           55 upper     single    multi credit\n 9          56.9          111          195 upper     single    multi credit\n10          87.0           40           46 upper     single    multi credit\n# … with 453 more rows"
  },
  {
    "objectID": "CRH-.html#the-pipe",
    "href": "CRH-.html#the-pipe",
    "title": "CRH-",
    "section": "The pipe",
    "text": "The pipe\nBefore working with more data wrangling functions, let’s formally introduce the pipe. The pipe, |>, is an operator (a tool) for passing information from one process to another. We will use |> mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.\nWhen reading code “in English”, say “and then” whenever you see a pipe.\n\nYour turn (4 minutes): Run the following chunk and observe its output. Then, come up with a different way of obtaining the same output.\n\n\nevals |>\n  select(score, rank) |>\n  head()\n\n# A tibble: 6 × 2\n  score rank        \n  <dbl> <chr>       \n1   4.7 tenure track\n2   4.1 tenure track\n3   3.9 tenure track\n4   4.8 tenure track\n5   4.6 tenured     \n6   4.3 tenured"
  },
  {
    "objectID": "CRH-.html#slice",
    "href": "CRH-.html#slice",
    "title": "CRH-",
    "section": "slice()",
    "text": "slice()\n\nDemo: Display the first five rows of the evals data frame.\n\n\nevals |>\n  slice(1:5)\n\n# A tibble: 5 × 23\n  course_id prof_id score rank      ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n      <dbl>   <dbl> <dbl> <chr>     <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n1         1       1   4.7 tenure t… minori… female english    36    55.8      24\n2         2       1   4.1 tenure t… minori… female english    36    68.8      86\n3         3       1   3.9 tenure t… minori… female english    36    60.8      76\n4         4       1   4.8 tenure t… minori… female english    36    62.6      77\n5         5       2   4.6 tenured   not mi… male   english    59    85        17\n# … with 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\n# with slice_head()\nevals |>\n  slice_head(n = 5)\n\n# A tibble: 5 × 23\n  course_id prof_id score rank      ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n      <dbl>   <dbl> <dbl> <chr>     <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n1         1       1   4.7 tenure t… minori… female english    36    55.8      24\n2         2       1   4.1 tenure t… minori… female english    36    68.8      86\n3         3       1   3.9 tenure t… minori… female english    36    60.8      76\n4         4       1   4.8 tenure t… minori… female english    36    62.6      77\n5         5       2   4.6 tenured   not mi… male   english    59    85        17\n# … with 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\nDemo: Display the last two rows of the evals data frame.\n\n\nevals |>\n  slice((n() - 1):n())\n\n# A tibble: 2 × 23\n  course_id prof_id score rank      ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n      <dbl>   <dbl> <dbl> <chr>     <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n1       462      94   4.4 tenure t… minori… female non-en…    42    81.8      54\n2       463      94   4.1 tenure t… minori… female non-en…    42    80        28\n# … with 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\n# with slice_tail()\nevals |>\n  slice_tail(n = 2)\n\n# A tibble: 2 × 23\n  course_id prof_id score rank      ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n      <dbl>   <dbl> <dbl> <chr>     <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n1       462      94   4.4 tenure t… minori… female non-en…    42    81.8      54\n2       463      94   4.1 tenure t… minori… female non-en…    42    80        28\n# … with 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval"
  },
  {
    "objectID": "CRH-.html#arrange",
    "href": "CRH-.html#arrange",
    "title": "CRH-",
    "section": "arrange()",
    "text": "arrange()\n\nDemo: Let’s arrange the data by score, so the courses with the lowest scores will be at the top of the data frame.\n\n\nevals |>\n  arrange(score)\n\n# A tibble: 463 × 23\n   course_id prof_id score rank     ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n       <dbl>   <dbl> <dbl> <chr>    <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n 1       162      30   2.3 tenure … not mi… female english    41    83.3      10\n 2       335      68   2.4 tenured  not mi… male   english    60    71.9      23\n 3        40       8   2.5 tenured  not mi… female english    51    80        24\n 4       337      68   2.5 tenured  not mi… male   english    60    62.5      10\n 5       329      66   2.7 tenured  not mi… male   english    64    81.8      18\n 6       376      76   2.7 tenured  minori… female english    43    48.9      93\n 7         7       2   2.8 tenured  not mi… male   english    59    88.6      39\n 8       185      34   2.8 tenure … minori… female english    47    92.3      24\n 9       434      88   2.8 tenured  not mi… male   english    62    40.9      61\n10        79      15   2.9 tenure … not mi… female english    37    82.1      23\n# … with 453 more rows, 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\nDemo: Now let’s arrange the data by descending score, so the evals with the highest scores will be at the top.\n\n\nevals |>\n  arrange(desc(score))\n\n# A tibble: 463 × 23\n   course_id prof_id score rank     ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n       <dbl>   <dbl> <dbl> <chr>    <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n 1        54      10     5 teaching not mi… male   english    47    90.9      10\n 2        57      10     5 teaching not mi… male   english    47    83.3      15\n 3        59      10     5 teaching not mi… male   english    47    80        16\n 4       103      19     5 tenured  not mi… female english    46    93.3      14\n 5       108      19     5 tenured  not mi… female english    46   100        15\n 6       349      71     5 teaching minori… male   english    50    90.9      20\n 7       356      71     5 teaching minori… male   english    50    95.2      20\n 8       406      82     5 tenured  not mi… male   english    57    40         6\n 9       420      85     5 teaching not mi… male   english    58   100        21\n10       421      85     5 teaching not mi… male   english    58    85.7      18\n# … with 453 more rows, 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\nYour turn (5 minutes): Create a data frame that only includes the evaluation score (score), faculty rank (rank), and average beauty rating of the professor (bty_avg) for the course with the highest evaluation score. What is the average beauty rating (bty_avg) for this professor?\n\n\nevals |>\n  select(score, rank, bty_avg) |>\n  arrange(desc(score), desc(bty_avg)) |>\n  slice(1)\n\n# A tibble: 1 × 3\n  score rank     bty_avg\n  <dbl> <chr>      <dbl>\n1     5 teaching    7.83"
  },
  {
    "objectID": "CRH-.html#filter",
    "href": "CRH-.html#filter",
    "title": "CRH-",
    "section": "filter()",
    "text": "filter()\n\nDemo: Filter the data frame by selecting the rows where the faculty is on the teaching-track.\n\n\nevals |>\n  filter(rank == \"teaching\")\n\n# A tibble: 102 × 23\n   course_id prof_id score rank     ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n       <dbl>   <dbl> <dbl> <chr>    <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n 1        50      10   4   teaching not mi… male   english    47    84.2      16\n 2        51      10   4.3 teaching not mi… male   english    47    75        12\n 3        52      10   4.4 teaching not mi… male   english    47    93.3      14\n 4        53      10   4.5 teaching not mi… male   english    47    95.7      22\n 5        54      10   5   teaching not mi… male   english    47    90.9      10\n 6        55      10   4.9 teaching not mi… male   english    47    58.6      17\n 7        56      10   4.6 teaching not mi… male   english    47    76.2      16\n 8        57      10   5   teaching not mi… male   english    47    83.3      15\n 9        58      10   4.7 teaching not mi… male   english    47    84.2      16\n10        59      10   5   teaching not mi… male   english    47    80        16\n# … with 92 more rows, 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\n\nDemo: We can also filter using more than one condition. Here we select all rows where the faculty is teaching-track and the evaluation score is greater than 3.5\n\n\nevals |>\n  filter(rank == \"teaching\", score > 3.5)\n\n# A tibble: 87 × 23\n   course_id prof_id score rank     ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n       <dbl>   <dbl> <dbl> <chr>    <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n 1        50      10   4   teaching not mi… male   english    47    84.2      16\n 2        51      10   4.3 teaching not mi… male   english    47    75        12\n 3        52      10   4.4 teaching not mi… male   english    47    93.3      14\n 4        53      10   4.5 teaching not mi… male   english    47    95.7      22\n 5        54      10   5   teaching not mi… male   english    47    90.9      10\n 6        55      10   4.9 teaching not mi… male   english    47    58.6      17\n 7        56      10   4.6 teaching not mi… male   english    47    76.2      16\n 8        57      10   5   teaching not mi… male   english    47    83.3      15\n 9        58      10   4.7 teaching not mi… male   english    47    84.2      16\n10        59      10   5   teaching not mi… male   english    47    80        16\n# … with 77 more rows, 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval\nWe can do more complex tasks using logical operators:\n\n\n\noperator\ndefinition\n\n\n\n\n<\nis less than?\n\n\n<=\nis less than or equal to?\n\n\n>\nis greater than?\n\n\n>=\nis greater than or equal to?\n\n\n==\nis exactly equal to?\n\n\n!=\nis not equal to?\n\n\nx & y\nis x AND y?\n\n\nx | y\nis x OR y?\n\n\nis.na(x)\nis x NA?\n\n\n!is.na(x)\nis x not NA?\n\n\nx %in% y\nis x in y?\n\n\n!(x %in% y)\nis x not in y?\n\n\n!x\nis not x?\n\n\n\nThe final operator only makes sense if x is logical (TRUE / FALSE).\n\nYour turn (4 minutes): Describe what the code is doing in words.\n\n\nevals |>\n  filter(\n    rank %in% c(\"tenure track\", \"tenure\"),\n    score > 3.5, bty_avg > 6\n  )\n\n# A tibble: 20 × 23\n   course_id prof_id score rank     ethni…¹ gender langu…²   age cls_p…³ cls_d…⁴\n       <dbl>   <dbl> <dbl> <chr>    <chr>   <chr>  <chr>   <dbl>   <dbl>   <dbl>\n 1        18       5   4.8 tenure … not mi… female english    31    87.5      42\n 2        19       5   4.6 tenure … not mi… female english    31    90.9      40\n 3        20       5   4.6 tenure … not mi… female english    31    79.2      38\n 4        21       5   4.9 tenure … not mi… female english    31    88.9      40\n 5        22       5   4.6 tenure … not mi… female english    31    88.1      52\n 6        23       5   4.5 tenure … not mi… female english    31    56.3      49\n 7       140      25   4.8 tenure … not mi… female english    34    76.9      20\n 8       141      25   4.1 tenure … not mi… female english    34    82.5      33\n 9       238      45   4.9 tenure … not mi… male   english    33    96.8      30\n10       240      45   3.7 tenure … not mi… male   english    33    86.7      13\n11       289      54   4.1 tenure … not mi… male   english    34    80        16\n12       290      54   3.6 tenure … not mi… male   english    34    57.1      20\n13       440      89   3.6 tenure … minori… female english    35    33.3      20\n14       441      89   3.7 tenure … minori… female english    35    39.8      43\n15       454      93   4.5 tenure … not mi… male   english    32    74.2      98\n16       455      93   4.5 tenure … not mi… male   english    32    87.4     111\n17       456      93   4.5 tenure … not mi… male   english    32    72.9      62\n18       457      93   4.6 tenure … not mi… male   english    32    75.2      76\n19       458      93   4.1 tenure … not mi… male   english    32    42.9       9\n20       459      93   4.5 tenure … not mi… male   english    32    60.5      52\n# … with 13 more variables: cls_students <dbl>, cls_level <chr>,\n#   cls_profs <chr>, cls_credits <chr>, bty_f1lower <dbl>, bty_f1upper <dbl>,\n#   bty_f2upper <dbl>, bty_m1lower <dbl>, bty_m1upper <dbl>, bty_m2upper <dbl>,\n#   bty_avg <dbl>, pic_outfit <chr>, pic_color <chr>, and abbreviated variable\n#   names ¹​ethnicity, ²​language, ³​cls_perc_eval, ⁴​cls_did_eval"
  },
  {
    "objectID": "CRH-.html#count",
    "href": "CRH-.html#count",
    "title": "CRH-",
    "section": "count()",
    "text": "count()\n\nDemo: Create a frequency table of the ethnicity of the evaluated professors.\n\n\nevals |>\n  count(ethnicity)\n\n# A tibble: 2 × 2\n  ethnicity        n\n  <chr>        <int>\n1 minority        64\n2 not minority   399\n\nDemo: Which faculty rank had the fewest number of evals? How many evals were there for that group?\n\n\nevals |>\n  count(rank) |>\n  filter(n == min(n))\n\n# A tibble: 1 × 2\n  rank         n\n  <chr>    <int>\n1 teaching   102\n\nYour turn (5 minutes): Which type of faculty (based on rank, gender, and ethnicity) is most highly represented in this dataset? How many courses did they teach in this sample?\n\n\nevals |>\n  count(rank, gender, ethnicity) |>\n  filter(n == max(n))\n\n# A tibble: 1 × 4\n  rank    gender ethnicity        n\n  <chr>   <chr>  <chr>        <int>\n1 tenured male   not minority   162"
  },
  {
    "objectID": "CRH-.html#mutate",
    "href": "CRH-.html#mutate",
    "title": "CRH-",
    "section": "mutate()",
    "text": "mutate()\nUse mutate() to create a new variable.\n\nDemo: In the code chunk below, we calculate difference in the average beauty ratings by gender of the rater (bty_f* vs bty_m*).\n\n\nevals |>\n  mutate(\n    bty_avg_f = (bty_f1lower + bty_f1upper + bty_f2upper) / 3,\n    bty_avg_m = (bty_m1lower + bty_m1upper + bty_m2upper) / 3,\n    bty_avg_diff = bty_avg_f - bty_avg_m\n  ) |>\n  select(score, bty_avg_f, bty_avg_m, bty_avg_diff)\n\n# A tibble: 463 × 4\n   score bty_avg_f bty_avg_m bty_avg_diff\n   <dbl>     <dbl>     <dbl>        <dbl>\n 1   4.7      6         4           2    \n 2   4.1      6         4           2    \n 3   3.9      6         4           2    \n 4   4.8      6         4           2    \n 5   4.6      3.33      2.67        0.667\n 6   4.3      3.33      2.67        0.667\n 7   2.8      3.33      2.67        0.667\n 8   4.1      4         2.67        1.33 \n 9   3.4      4         2.67        1.33 \n10   4.5      3.67      2.67        1    \n# … with 453 more rows\n\nYour turn (4 minutes): Create a new variable to calculate the percentage of evals for each faculty rank. What percentage of evals were for teaching-track faculty?\n\n\nevals |>\n  count(rank) |>\n  mutate(perc = n / sum(n) * 100)\n\n# A tibble: 3 × 3\n  rank             n  perc\n  <chr>        <int> <dbl>\n1 teaching       102  22.0\n2 tenure track   108  23.3\n3 tenured        253  54.6"
  },
  {
    "objectID": "CRH-.html#summarize",
    "href": "CRH-.html#summarize",
    "title": "CRH-",
    "section": "summarize()",
    "text": "summarize()\nsummarize() collapses the rows into summary statistics and removes columns irrelevant to the calculation.\nBe sure to name your columns!\nevals |>\n  summarize(mean_score = mean(score))\n\n# A tibble: 1 × 1\n  mean_score\n       <dbl>\n1         NA\nQuestion: Why did this code return NA?\nLet’s fix it!\nevals |>\n  summarize(mean_score = mean(score, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_score\n       <dbl>\n1       4.18"
  },
  {
    "objectID": "CRH-.html#group_by",
    "href": "CRH-.html#group_by",
    "title": "CRH-",
    "section": "group_by()",
    "text": "group_by()\ngroup_by() is used for grouped operations. It’s very powerful when paired with summarize() to calculate summary statistics by group.\nHere we find the mean and standard deviation of evaluation scores for each professor in the sample.\nevals |>\n  group_by(prof_id) |>\n  summarize(\n    mean_score = mean(score, na.rm = TRUE),\n    sd_score = sd(score, na.rm = TRUE)\n  )\n\n# A tibble: 94 × 3\n   prof_id mean_score sd_score\n     <dbl>      <dbl>    <dbl>\n 1       1       4.38    0.443\n 2       2       3.9     0.964\n 3       3       3.75    0.495\n 4       4       4.3     0.321\n 5       5       4.67    0.151\n 6       6       4.63    0.180\n 7       7       4.1     0.354\n 8       8       4       0.766\n 9       9       4.61    0.177\n10      10       4.64    0.344\n# … with 84 more rows\n\nYour turn (4 minutes): What is the median evaluation score for each faculty rank? Which type of faculty has the lowest median evaluation score?\n\n\nevals |>\n  group_by(rank) |>\n  summarize(\n    med_score = median(score, na.rm = TRUE)\n  )\n\n# A tibble: 3 × 2\n  rank         med_score\n  <chr>            <dbl>\n1 teaching          4.4 \n2 tenure track      4.35\n3 tenured           4.2"
  },
  {
    "objectID": "CRH-.html#footnotes-1",
    "href": "CRH-.html#footnotes-1",
    "title": "CRH-",
    "section": "Footnotes",
    "text": "Footnotes\n\nSource: Daniel S. Hamermesh, Amy Parker, Beauty in the classroom: instructors’ pulchritude and putative pedagogical productivity, Economics of Education Review, Volume 24, Issue 4, 2005 and OpenIntro.↩︎\nFrom dplyr vignette↩︎"
  },
  {
    "objectID": "CRH-.html#working-with-multiple-data-frames",
    "href": "CRH-.html#working-with-multiple-data-frames",
    "title": "CRH-",
    "section": "Working with multiple data frames",
    "text": "Working with multiple data frames\nOften instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\nThere are many possible types of joins. All have the format something_join(x, y).\nsuperheroes <- tribble(\n  ~name, ~alignment, ~gender, ~publisher,\n  \"Magneto\", \"bad\", \"male\", \"Marvel\",\n  \"Batman\", \"good\", \"male\", \"DC\",\n  \"Sabrina\", \"good\", \"female\", \"Archie Comics\"\n)\n\npublishers <- tribble(\n  ~publisher, ~yr_founded,\n  \"DC\", 1934,\n  \"Marvel\", 1939,\n  \"Image\", 1992\n)\n\nsuperheroes\n\n# A tibble: 3 × 4\n  name    alignment gender publisher    \n  <chr>   <chr>     <chr>  <chr>        \n1 Magneto bad       male   Marvel       \n2 Batman  good      male   DC           \n3 Sabrina good      female Archie Comics\n\npublishers\n\n# A tibble: 3 × 2\n  publisher yr_founded\n  <chr>          <dbl>\n1 DC              1934\n2 Marvel          1939\n3 Image           1992\nWe will demonstrate each of the joins on these small, toy datasets.\n\ninner_join(): join all rows from x where there are matching values in y\ninner_join(x = superheroes, y = publishers)\n\nJoining, by = \"publisher\"\n\n# A tibble: 2 × 5\n  name    alignment gender publisher yr_founded\n  <chr>   <chr>     <chr>  <chr>          <dbl>\n1 Magneto bad       male   Marvel          1939\n2 Batman  good      male   DC              1934\n\n\nleft_join(): include all rows from x\nleft_join(x = superheroes, y = publishers)\n\nJoining, by = \"publisher\"\n\n# A tibble: 3 × 5\n  name    alignment gender publisher     yr_founded\n  <chr>   <chr>     <chr>  <chr>              <dbl>\n1 Magneto bad       male   Marvel              1939\n2 Batman  good      male   DC                  1934\n3 Sabrina good      female Archie Comics         NA\n\n\nright_join(): include all rows from y\nright_join(x = superheroes, y = publishers)\n\nJoining, by = \"publisher\"\n\n# A tibble: 3 × 5\n  name    alignment gender publisher yr_founded\n  <chr>   <chr>     <chr>  <chr>          <dbl>\n1 Magneto bad       male   Marvel          1939\n2 Batman  good      male   DC              1934\n3 <NA>    <NA>      <NA>   Image           1992\n\n\nfull_join(): include all rows in x or y (use this one sparingly!!)\nfull_join(x = superheroes, y = publishers)\n\nJoining, by = \"publisher\"\n\n# A tibble: 4 × 5\n  name    alignment gender publisher     yr_founded\n  <chr>   <chr>     <chr>  <chr>              <dbl>\n1 Magneto bad       male   Marvel              1939\n2 Batman  good      male   DC                  1934\n3 Sabrina good      female Archie Comics         NA\n4 <NA>    <NA>      <NA>   Image               1992\n\n\nsemi_join(): return all rows from x with match in y\nsemi_join(x = superheroes, y = publishers)\n\nJoining, by = \"publisher\"\n\n# A tibble: 2 × 4\n  name    alignment gender publisher\n  <chr>   <chr>     <chr>  <chr>    \n1 Magneto bad       male   Marvel   \n2 Batman  good      male   DC       \n\n\nanti_join(): return all rows from x without a match in y\nanti_join(x = superheroes, y = publishers)\n\nJoining, by = \"publisher\"\n\n# A tibble: 1 × 4\n  name    alignment gender publisher    \n  <chr>   <chr>     <chr>  <chr>        \n1 Sabrina good      female Archie Comics\nQuestion: How do the join functions above know to join x and y by value? Hint: Examine the column names to find out.\nnames(superheroes)\n\n[1] \"name\"      \"alignment\" \"gender\"    \"publisher\"\n\nnames(publishers)\n\n[1] \"publisher\"  \"yr_founded\""
  },
  {
    "objectID": "CRH-.html#prognosticator-success",
    "href": "CRH-.html#prognosticator-success",
    "title": "CRH-",
    "section": "Prognosticator success",
    "text": "Prognosticator success\nWe previously examined the accuracy rate of Groundhog Day prognosticators.1 Today we want to work with the original dataset to understand how those accuracy metrics were generated and answer the question: How does prognosticator accuracy vary by climatic region?\nLet’s start by looking at the seers data frame.\nglimpse(seers)\n\nRows: 1,457\nColumns: 7\n$ name            <chr> \"Punxsutawney Phil\", \"Punxsutawney Phil\", \"Punxsutawne…\n$ forecaster_type <chr> \"Groundhog\", \"Groundhog\", \"Groundhog\", \"Groundhog\", \"G…\n$ alive           <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ town            <chr> \"Punxsutawney\", \"Punxsutawney\", \"Punxsutawney\", \"Punxs…\n$ state           <chr> \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", …\n$ year            <dbl> 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, …\n$ prediction      <chr> \"Long Winter\", \"Long Winter\", \"Early Spring\", \"Early S…\nWe have the predictions, but our goal is to make a visualization by climate region.2\n\nLet’s take a look at the weather data frame.\nglimpse(weather)\n\nRows: 5,424\nColumns: 13\n$ region         <chr> \"Northeast\", \"Northeast\", \"Northeast\", \"Northeast\", \"No…\n$ state_abb      <chr> \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"…\n$ id             <dbl> 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, …\n$ year           <dbl> 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1…\n$ avg_temp       <dbl> 28.00, 29.20, 24.90, 23.15, 28.05, 22.05, 27.50, 21.55,…\n$ temp_hist      <dbl> 25.58333, 26.09000, 26.16667, 25.85667, 25.63333, 25.52…\n$ temp_hist_sd   <dbl> 4.245360, 4.241218, 4.103158, 4.124311, 3.907804, 4.016…\n$ temp_sd        <dbl> 4.118598, 4.118598, 4.118598, 4.118598, 4.118598, 4.118…\n$ precip         <dbl> 4.005, 2.520, 2.810, 3.570, 3.765, 2.920, 2.330, 3.425,…\n$ precip_hist    <dbl> 3.476667, 3.526667, 3.378000, 3.411000, 3.446333, 3.352…\n$ precip_hist_sd <dbl> 1.1784719, 1.2081292, 1.1442431, 1.1620681, 1.2039309, …\n$ precip_sd      <dbl> 0.9641827, 0.9641827, 0.9641827, 0.9641827, 0.9641827, …\n$ outcome        <chr> \"Early Spring\", \"Early Spring\", \"Early Spring\", \"Late W…\n\nYour turn (2 minutes):\n\nWhich variable(s) will we use to join the seers and weather data frames?\nWe want to keep all rows and columns from seers and add columns for corresponding weather data. Which join function should we use?\n\nDemo: Join the two data frames and assign the joined data frame to seers_weather.\n\n\nseers_weather <- inner_join(\n  x = seers, y = weather,\n  by = c(\"state\" = \"state_abb\", \"year\")\n)\n\nDemo: Take a look at the updated seers data frame. First we need to calculate for each prediction whether or not the prognistication was correct.\n\n\nseers_weather <- seers_weather |>\n  mutate(correct_pred = prediction == outcome)\n\nDemo: Calculate the accuracy rate (we’ll call it preds_rate) for weather predictions using the summarize() function in dplyr. Note that the function for calculating the mean is mean() in R.\n\n\nseers_weather |> # start with seers data frame\n  group_by(region) |> # group by region\n  summarize(preds_rate = mean(correct_pred)) # calculate accuracy rate\n\n# A tibble: 9 × 2\n  region                      preds_rate\n  <chr>                            <dbl>\n1 Northeast                        0.299\n2 Northern Rockies and Plains      0.488\n3 Northwest                        0.214\n4 Ohio Valley                      0.5  \n5 South                            0.438\n6 Southeast                        0.484\n7 Southwest                        0.379\n8 Upper Midwest                    0.386\n9 West                             0    \n\n\nYour turn (time permitting): Make any other changes you would like to improve it.\n\n\n# add your code here"
  },
  {
    "objectID": "CRH-.html#footnotes-2",
    "href": "CRH-.html#footnotes-2",
    "title": "CRH-",
    "section": "Footnotes",
    "text": "Footnotes\n\nSee ae-02↩︎\nSource: National Weather Service Climate Prediction Center↩︎"
  },
  {
    "objectID": "CRH-.html#goal",
    "href": "CRH-.html#goal",
    "title": "CRH-",
    "section": "Goal",
    "text": "Goal\nOur ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\n\nYour turn (3 minutes): Take a close look at the plot and describe what it shows in 2-3 sentences.\n\nAdd your response here."
  },
  {
    "objectID": "CRH-.html#data-1",
    "href": "CRH-.html#data-1",
    "title": "CRH-",
    "section": "Data",
    "text": "Data\nThe data come from the Department of Education’s College Scorecard.\nThey make the data available through online dashboards and an API, but I’ve prepared the data for you in a CSV file. Let’s load that in.\nlibrary(tidyverse)\nlibrary(scales)\n\ncornell_deg <- read_csv(\"data/cornell-degrees.csv\")\nAnd let’s take a look at the data.\ncornell_deg\n\n# A tibble: 6 × 21\n  field_…¹ `2001` `2002` `2003` `2004` `2005` `2006` `2007` `2008` `2009` `2010`\n  <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 academi… 0.239  0.290  0.173  0.161   0.168 0.170  0.181  0.183  0.181  0.179 \n2 academi… 0.112  0.0979 0.110  0.198   0.157 0.168  0.151  0.136  0.148  0.129 \n3 academi… 0.0859 0.0745 0.0463 0.0327  0.032 0.0221 0.0263 0.0262 0.0264 0.0297\n4 academi… 0.071  0.0709 0.112  0.100   0.109 0.107  0.116  0.122  0.117  0.12  \n5 academi… 0      0      0.122  0.112   0.109 0.110  0.126  0.134  0.128  0.12  \n6 academi… 0.161  0.160  0.105  0.0973  0.113 0.099  0.102  0.0975 0.0983 0.0994\n# … with 10 more variables: `2011` <dbl>, `2012` <dbl>, `2013` <dbl>,\n#   `2014` <dbl>, `2015` <dbl>, `2016` <dbl>, `2017` <dbl>, `2018` <dbl>,\n#   `2019` <dbl>, `2020` <dbl>, and abbreviated variable name ¹​field_of_study\nThe dataset has 6 rows and 21 columns. The first column (variable) is the field_of_study, which are the 6 most frequent fields of study for students graduating in 2020.1 The remaining columns show the proportion of degrees awarded in each year from 2001-2020.\n\nYour turn (4 minutes): Take a look at the plot we aim to make and sketch the data frame we need to make the plot. Determine what each row and each column of the data frame should be. Hint: We need data to be in columns to map to aesthetic elements of the plot.\n\nColumns: year, pct , field_of_study\nRows: Combination of year and field of study"
  },
  {
    "objectID": "CRH-.html#pivoting",
    "href": "CRH-.html#pivoting",
    "title": "CRH-",
    "section": "Pivoting",
    "text": "Pivoting\n\nDemo: Pivot the cornell_deg data frame longer such that each row represents a field of study / year combination and year and number of graduates for that year are columns in the data frame.\n\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    values_to = \"pct\"\n  )\n\n# A tibble: 120 × 3\n   field_of_study                           year    pct\n   <chr>                                    <chr> <dbl>\n 1 academics.program_percentage.engineering 2001  0.239\n 2 academics.program_percentage.engineering 2002  0.290\n 3 academics.program_percentage.engineering 2003  0.173\n 4 academics.program_percentage.engineering 2004  0.161\n 5 academics.program_percentage.engineering 2005  0.168\n 6 academics.program_percentage.engineering 2006  0.170\n 7 academics.program_percentage.engineering 2007  0.181\n 8 academics.program_percentage.engineering 2008  0.183\n 9 academics.program_percentage.engineering 2009  0.181\n10 academics.program_percentage.engineering 2010  0.179\n# … with 110 more rows\n\nQuestion: What is the type of the year variable? Why? What should it be?\n\nIt’s a character (chr) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years. The variable type should be numeric.\n\nDemo: Start over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame.\n\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  )\n\n# A tibble: 120 × 3\n   field_of_study                            year   pct\n   <chr>                                    <dbl> <dbl>\n 1 academics.program_percentage.engineering  2001 0.239\n 2 academics.program_percentage.engineering  2002 0.290\n 3 academics.program_percentage.engineering  2003 0.173\n 4 academics.program_percentage.engineering  2004 0.161\n 5 academics.program_percentage.engineering  2005 0.168\n 6 academics.program_percentage.engineering  2006 0.170\n 7 academics.program_percentage.engineering  2007 0.181\n 8 academics.program_percentage.engineering  2008 0.183\n 9 academics.program_percentage.engineering  2009 0.181\n10 academics.program_percentage.engineering  2010 0.179\n# … with 110 more rows\n\nDemo: In our plot the fields of study are the name of the field. This information is in our dataset, in the field_of_study column, but this column also has additional characters we don’t need. Create a new column called field with levels Engineering, Business Marketing, Computer, Biological, Agriculture, and Social Science (in this order) based on field_of_study. Do this by adding on to your pipeline from earlier.\n\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  ) |>\n  separate(col = field_of_study, into = c(NA, NA, \"field\"), sep = \"\\\\.\") |>\n  mutate(\n    field = str_replace(string = field, pattern = \"_\", replacement = \" \"),\n    field = str_to_title(string = field),\n    field = fct_relevel(\n      field, \"Engineering\", \"Business Marketing\", \"Computer\",\n      \"Biological\", \"Agriculture\", \"Social Science\"\n    )\n  ) |>\n  relocate(field)\n\n# A tibble: 120 × 3\n   field        year   pct\n   <fct>       <dbl> <dbl>\n 1 Engineering  2001 0.239\n 2 Engineering  2002 0.290\n 3 Engineering  2003 0.173\n 4 Engineering  2004 0.161\n 5 Engineering  2005 0.168\n 6 Engineering  2006 0.170\n 7 Engineering  2007 0.181\n 8 Engineering  2008 0.183\n 9 Engineering  2009 0.181\n10 Engineering  2010 0.179\n# … with 110 more rows\n\nYour turn (5 minutes): Now we start making our plot, but let’s not get too fancy right away. Create the following plot, which will serve as the “first draft” on the way to our Goal. Do this by adding on to your pipeline from earlier.\n\n\n\n\n\n\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  ) |>\n  separate(col = field_of_study, into = c(NA, NA, \"field\"), sep = \"\\\\.\") |>\n  mutate(\n    field = str_replace(string = field, pattern = \"_\", replacement = \" \"),\n    field = str_to_title(string = field),\n    field = fct_relevel(\n      field, \"Engineering\", \"Business Marketing\", \"Computer\",\n      \"Biological\", \"Agriculture\", \"Social Science\"\n    )\n  ) |>\n  relocate(field) |>\n  ggplot(aes(x = year, y = pct, color = field)) +\n  geom_point() +\n  geom_line()\n\n\nYour turn (4 minutes): What aspects of the plot need to be updated to go from the draft you created above to the Goal plot at the beginning of this application exercise.\n\nx-axis scale: need to go from 2000 to 2020 in increments of 4 years\ny-axis scale: percentage labeling\nline colors\naxis labels: title, subtitle, x, y, caption\ntheme\nlegend position and border\n\nDemo: Update x-axis scale such that the years displayed go from 2000 to 2020 in increments of 4 years. Update y-axis scale so it uses percentage formatting. Do this by adding on to your pipeline from earlier.\n\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  ) |>\n  separate(col = field_of_study, into = c(NA, NA, \"field\"), sep = \"\\\\.\") |>\n  mutate(\n    field = str_replace(string = field, pattern = \"_\", replacement = \" \"),\n    field = str_to_title(string = field),\n    field = fct_relevel(\n      field, \"Engineering\", \"Business Marketing\", \"Computer\",\n      \"Biological\", \"Agriculture\", \"Social Science\"\n    )\n  ) |>\n  relocate(field) |>\n  ggplot(aes(x = year, y = pct, color = field)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2020), breaks = seq(2000, 2020, 4)) +\n  scale_y_continuous(labels = label_percent())\n\n\nDemo: Update line colors using the scale_color_colorblind() palette from ggthemes. Once again, do this by adding on to your pipeline from earlier.\n\n\nlibrary(ggthemes)\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  ) |>\n  separate(col = field_of_study, into = c(NA, NA, \"field\"), sep = \"\\\\.\") |>\n  mutate(\n    field = str_replace(string = field, pattern = \"_\", replacement = \" \"),\n    field = str_to_title(string = field),\n    field = fct_relevel(\n      field, \"Engineering\", \"Business Marketing\", \"Computer\",\n      \"Biological\", \"Agriculture\", \"Social Science\"\n    )\n  ) |>\n  relocate(field) |>\n  ggplot(aes(x = year, y = pct, color = field)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2020), breaks = seq(2000, 2020, 4)) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_color_colorblind()\n\n\nYour turn (4 minutes): Update the plot labels (title, subtitle, x, y, and caption) and use theme_minimal(). Once again, do this by adding on to your pipeline from earlier.\n\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  ) |>\n  separate(col = field_of_study, into = c(NA, NA, \"field\"), sep = \"\\\\.\") |>\n  mutate(\n    field = str_replace(string = field, pattern = \"_\", replacement = \" \"),\n    field = str_to_title(string = field),\n    field = fct_relevel(\n      field, \"Engineering\", \"Business Marketing\", \"Computer\",\n      \"Biological\", \"Agriculture\", \"Social Science\"\n    )\n  ) |>\n  relocate(field) |>\n  ggplot(aes(x = year, y = pct, color = field)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2020), breaks = seq(2000, 2020, 4)) +\n  scale_color_colorblind() +\n  scale_y_continuous(labels = label_percent()) +\n  labs(\n    x = \"Graduation year\",\n    y = \"Percent of degrees awarded\",\n    color = \"Field of study\",\n    title = \"Cornell University degrees awarded from 2001-2020\",\n    subtitle = \"Only the top six fields as of 2020\",\n    caption = \"Source: Department of Education\\nhttps://collegescorecard.ed.gov/\"\n  ) +\n  theme_minimal()\n\n\nDemo: Finally, set fig-width: 7 and fig-height: 5 for your plot in the chunk options.\n\n\n#| fig-width: 7\n#| fig-height: 5\n\ncornell_deg |>\n  pivot_longer(\n    cols = -field_of_study,\n    names_to = \"year\",\n    names_transform = parse_number,\n    values_to = \"pct\"\n  ) |>\n  separate(col = field_of_study, into = c(NA, NA, \"field\"), sep = \"\\\\.\") |>\n  mutate(\n    field = str_replace(string = field, pattern = \"_\", replacement = \" \"),\n    field = str_to_title(string = field),\n    field = fct_relevel(\n      field, \"Engineering\", \"Business Marketing\", \"Computer\",\n      \"Biological\", \"Agriculture\", \"Social Science\"\n    )\n  ) |>\n  relocate(field) |>\n  ggplot(aes(x = year, y = pct, color = field)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2020), breaks = seq(2000, 2020, 4)) +\n  scale_color_colorblind() +\n  scale_y_continuous(labels = label_percent()) +\n  labs(\n    x = \"Graduation year\",\n    y = \"Percent of degrees awarded\",\n    color = \"Field of study\",\n    title = \"Cornell University degrees awarded from 2001-2020\",\n    subtitle = \"Only the top six fields as of 2020\",\n    caption = \"Source: Department of Education\\nhttps://collegescorecard.ed.gov/\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "CRH-.html#footnotes-3",
    "href": "CRH-.html#footnotes-3",
    "title": "CRH-",
    "section": "Footnotes",
    "text": "Footnotes\n\nFor the sake of application, I omitted the other 32 possible fields of study.↩︎"
  },
  {
    "objectID": "CRH-.html#packages-1",
    "href": "CRH-.html#packages-1",
    "title": "CRH-",
    "section": "Packages",
    "text": "Packages\n\ntidyverse: For data import, wrangling, and visualization.\nskimr: For summarizing the entire data frame at once.\nscales: For better axis labels.\n\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(scales)"
  },
  {
    "objectID": "CRH-.html#type-coercion",
    "href": "CRH-.html#type-coercion",
    "title": "CRH-",
    "section": "Type coercion",
    "text": "Type coercion\n\nDemo: Determine the type of the following vector. And then, change the type to numeric.\nx <- c(\"1\", \"2\", \"3\")\ntypeof(x)\n\n[1] \"character\"\n\nas.numeric(x)\n\n[1] 1 2 3\n\nparse_number(x)\n\n[1] 1 2 3\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\ny <- c(\"a\", \"b\", \"c\")\ntypeof(y)\n\n[1] \"character\"\n\nas.numeric(y)\n\nWarning: NAs introduced by coercion\n\n[1] NA NA NA\n\nparse_number(y)\n\nWarning: 3 parsing failures.\nrow col expected actual\n  1  -- a number      a\n  2  -- a number      b\n  3  -- a number      c\n\n[1] NA NA NA\nattr(,\"problems\")\n# A tibble: 3 × 4\n    row   col expected actual\n  <int> <int> <chr>    <chr> \n1     1    NA a number a     \n2     2    NA a number b     \n3     3    NA a number c     \nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\nz <- c(\"1\", \"2\", \"three\")\ntypeof(z)\n\n[1] \"character\"\n\nas.numeric(z)\n\nWarning: NAs introduced by coercion\n\n[1]  1  2 NA\n\nparse_number(z)\n\nWarning: 1 parsing failure.\nrow col expected actual\n  3  -- a number  three\n\n[1]  1  2 NA\nattr(,\"problems\")\n# A tibble: 1 × 4\n    row   col expected actual\n  <int> <int> <chr>    <chr> \n1     3    NA a number three \nDemo: Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:\nsurvey_results <- tibble(cars = c(1, 2, \"three\"))\nsurvey_results\n\n# A tibble: 3 × 1\n  cars \n  <chr>\n1 1    \n2 2    \n3 three\nThis is annoying because of that third survey taker who just had to go and type out the number instead of providing as a numeric value. So now you need to update the cars variable to be numeric. You do the following\nsurvey_results |>\n  mutate(cars = as.numeric(cars))\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3    NA\nAnd now things are even more annoying because you get a warning NAs introduced by coercion that happened while computing cars = as.numeric(cars) and the response from the third survey taker is now an NA (you lost their data). Fix your mutate() call to avoid this warning.\nsurvey_results |>\n  mutate(\n    cars = if_else(cars == \"three\", \"3\", cars),\n    cars = as.numeric(cars)\n    )\n\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3     3\n\n# or with parse_number()\nsurvey_results |>\n  mutate(\n    cars = if_else(cars == \"three\", \"3\", cars),\n    cars = parse_number(cars)\n    )\n\n# A tibble: 3 × 1\n   cars\n  <dbl>\n1     1\n2     2\n3     3\nYour turn: First, guess the type of the vector. Then, check if you guessed right. I’ve done the first one for you, you’ll see that it’s helpful to check the type of each element of the vector first.\n\nc(1, 1L, \"C\")\nv1 <- c(1, 1L, \"C\")\n\n# to help you guess\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(\"C\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v1)\n\n[1] \"character\"\nc(1L / 0, \"A\")\nv2 <- c(1L / 0, \"A\")\n\n# to help you guess\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(0)\n\n[1] \"double\"\n\ntypeof(1L / 0)\n\n[1] \"double\"\n\ntypeof(\"A\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v2)\n\n[1] \"character\"\nc(1:3, 5)\nv3 <- c(1:3, 5)\n\n# to help you guess\ntypeof(1:3)\n\n[1] \"integer\"\n\ntypeof(5)\n\n[1] \"double\"\n\n# to check after you guess\ntypeof(v3)\n\n[1] \"double\"\nc(3, \"3+\")\nv4 <- c(3, \"3+\")\n\n# to help you guess\ntypeof(3)\n\n[1] \"double\"\n\ntypeof(\"3+\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v4)\n\n[1] \"character\"\nc(NA, TRUE)\nv5 <- c(NA, TRUE)\n\n# to help you guess\ntypeof(NA)\n\n[1] \"logical\"\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n# to check after you guess\ntypeof(v5)\n\n[1] \"logical\""
  },
  {
    "objectID": "CRH-.html#hotel-bookings",
    "href": "CRH-.html#hotel-bookings",
    "title": "CRH-",
    "section": "Hotel bookings",
    "text": "Hotel bookings\n# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md\n\nhotels <- read_csv(\"data/hotels.csv\")\nskim(hotels)  # much more useful to run interactively in the console\n\n\n\n\nData summary\n\n\n\n\nName\nhotels\n\n\nNumber of rows\n119390\n\n\nNumber of columns\n32\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nDate\n1\n\n\nnumeric\n18\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nhotel\n0\n1\n10\n12\n0\n2\n0\n\n\narrival_date_month\n0\n1\n3\n9\n0\n12\n0\n\n\nmeal\n0\n1\n2\n9\n0\n5\n0\n\n\ncountry\n0\n1\n2\n4\n0\n178\n0\n\n\nmarket_segment\n0\n1\n6\n13\n0\n8\n0\n\n\ndistribution_channel\n0\n1\n3\n9\n0\n5\n0\n\n\nreserved_room_type\n0\n1\n1\n1\n0\n10\n0\n\n\nassigned_room_type\n0\n1\n1\n1\n0\n12\n0\n\n\ndeposit_type\n0\n1\n10\n10\n0\n3\n0\n\n\nagent\n0\n1\n1\n4\n0\n334\n0\n\n\ncompany\n0\n1\n1\n4\n0\n353\n0\n\n\ncustomer_type\n0\n1\n5\n15\n0\n4\n0\n\n\nreservation_status\n0\n1\n7\n9\n0\n3\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nreservation_status_date\n0\n1\n2014-10-17\n2017-09-14\n2016-08-07\n926\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nis_canceled\n0\n1\n0.37\n0.48\n0.00\n0.00\n0.00\n1\n1\n▇▁▁▁▅\n\n\nlead_time\n0\n1\n104.01\n106.86\n0.00\n18.00\n69.00\n160\n737\n▇▂▁▁▁\n\n\narrival_date_year\n0\n1\n2016.16\n0.71\n2015.00\n2016.00\n2016.00\n2017\n2017\n▃▁▇▁▆\n\n\narrival_date_week_number\n0\n1\n27.17\n13.61\n1.00\n16.00\n28.00\n38\n53\n▅▇▇▇▅\n\n\narrival_date_day_of_month\n0\n1\n15.80\n8.78\n1.00\n8.00\n16.00\n23\n31\n▇▇▇▇▆\n\n\nstays_in_weekend_nights\n0\n1\n0.93\n1.00\n0.00\n0.00\n1.00\n2\n19\n▇▁▁▁▁\n\n\nstays_in_week_nights\n0\n1\n2.50\n1.91\n0.00\n1.00\n2.00\n3\n50\n▇▁▁▁▁\n\n\nadults\n0\n1\n1.86\n0.58\n0.00\n2.00\n2.00\n2\n55\n▇▁▁▁▁\n\n\nchildren\n4\n1\n0.10\n0.40\n0.00\n0.00\n0.00\n0\n10\n▇▁▁▁▁\n\n\nbabies\n0\n1\n0.01\n0.10\n0.00\n0.00\n0.00\n0\n10\n▇▁▁▁▁\n\n\nis_repeated_guest\n0\n1\n0.03\n0.18\n0.00\n0.00\n0.00\n0\n1\n▇▁▁▁▁\n\n\nprevious_cancellations\n0\n1\n0.09\n0.84\n0.00\n0.00\n0.00\n0\n26\n▇▁▁▁▁\n\n\nprevious_bookings_not_canceled\n0\n1\n0.14\n1.50\n0.00\n0.00\n0.00\n0\n72\n▇▁▁▁▁\n\n\nbooking_changes\n0\n1\n0.22\n0.65\n0.00\n0.00\n0.00\n0\n21\n▇▁▁▁▁\n\n\ndays_in_waiting_list\n0\n1\n2.32\n17.59\n0.00\n0.00\n0.00\n0\n391\n▇▁▁▁▁\n\n\nadr\n0\n1\n101.83\n50.54\n-6.38\n69.29\n94.58\n126\n5400\n▇▁▁▁▁\n\n\nrequired_car_parking_spaces\n0\n1\n0.06\n0.25\n0.00\n0.00\n0.00\n0\n8\n▇▁▁▁▁\n\n\ntotal_of_special_requests\n0\n1\n0.57\n0.79\n0.00\n0.00\n0.00\n1\n5\n▇▁▁▁▁\n\n\n\nQuestion: Take a look at the the following visualization. How are the months ordered? What would be a better order?\n\n\n\n\n\n\nDemo: Reorder the months on the x-axis (levels of arrival_date_month) in a way that makes more sense. You will want to use a function from the forcats package, see https://forcats.tidyverse.org/reference/index.html for inspiration and help.\nhotels |>\n  mutate(\n    # convert to factor, use labels argument to create short versions\n    arrival_date_month = factor(\n      x = arrival_date_month,\n      levels = month.name,\n      labels = month.abb\n    )\n  ) |>\n  group_by(hotel, arrival_date_month) |>\n  summarize(mean_adr = mean(adr), .groups = \"drop\") |>\n  ggplot(mapping = aes(\n    x = arrival_date_month,\n    y = mean_adr,\n    group = hotel,\n    color = hotel\n  )) +\n  geom_line() +\n  theme_minimal() +\n  labs(\n    x = \"Arrival month\",\n    y = \"Mean ADR (average daily rate)\",\n    title = \"Comparison of resort and city hotel prices across months\",\n    subtitle = \"Resort hotel prices soar in the summer while city hotel prices remain relatively constant throughout the year\",\n    color = \"Hotel type\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CRH",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]